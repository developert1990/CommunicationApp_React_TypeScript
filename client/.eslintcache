[{"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\App.tsx":"1","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\RegisterScreen.tsx":"2","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\index.tsx":"3","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\config\\index.ts":"4","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\constants\\userConstants.ts":"5","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\reducers\\userReducer.ts":"6","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\actions\\userActions.ts":"7","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\index.tsx":"8","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\store.ts":"9","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\routes\\router.tsx":"10","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\Navbar.tsx":"11","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\SigninScreen.tsx":"12","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\PrivateRoute.tsx":"13","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\UserImage.tsx":"14","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\constants\\postConstants.ts":"15","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\actions\\postActions.ts":"16","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\reducers\\postReducer.ts":"17","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\Posts.tsx":"18","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\utils\\utils.ts":"19","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\SinglePost.tsx":"20","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\Reply.tsx":"21","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\actions\\replyActions.ts":"22","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\constants\\replyConstants.ts":"23","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\reducers\\replyReducer.ts":"24","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\ThirdColumn.tsx":"25","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\ProfileScreen.tsx":"26","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\ProfileReplies.tsx":"27","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\ProfilePosts.tsx":"28","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\HomeScreen.tsx":"29","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\FollowModal.tsx":"30","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\ImgUploadModal.tsx":"31","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\CoverImgUploadModal.tsx":"32","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\SearchScreen.tsx":"33","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\SearchPosts.tsx":"34","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\SearchUsers.tsx":"35","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\constants\\searchConstants.ts":"36","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\MessageScreen.tsx":"37","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\NewMessageScreen.tsx":"38","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\ToggleAlert.tsx":"39","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\actions\\searchAction.ts":"40","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\constants\\chatConstants.ts":"41","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\actions\\chatAction.ts":"42","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\reducers\\chatReducer.ts":"43","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\ChatScreen.tsx":"44","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\CheckValidChatRoute.tsx":"45","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\InvalidPage.tsx":"46","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\MessageContents.tsx":"47","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\reducers\\searchReducer.ts":"48","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\NotificationScreen.tsx":"49","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\constants\\notificationConstants.ts":"50","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\actions\\notificationAction.ts":"51","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\reducers\\notificationReducer.ts":"52","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\LoadingSpinner.tsx":"53","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\socketio.ts":"54","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\hooks\\index.ts":"55"},{"size":180,"mtime":1608078380877,"results":"56","hashOfConfig":"57"},{"size":3830,"mtime":1608097240564,"results":"58","hashOfConfig":"57"},{"size":351,"mtime":1608005785620,"results":"59","hashOfConfig":"57"},{"size":48,"mtime":1607973570394,"results":"60","hashOfConfig":"57"},{"size":867,"mtime":1608521145045,"results":"61","hashOfConfig":"57"},{"size":3982,"mtime":1608665205176,"results":"62","hashOfConfig":"57"},{"size":3842,"mtime":1608875577728,"results":"63","hashOfConfig":"57"},{"size":305,"mtime":1609614154670,"results":"64","hashOfConfig":"57"},{"size":5102,"mtime":1609621458900,"results":"65","hashOfConfig":"57"},{"size":3170,"mtime":1609841522092,"results":"66","hashOfConfig":"57"},{"size":2652,"mtime":1609831657871,"results":"67","hashOfConfig":"57"},{"size":1964,"mtime":1608182861671,"results":"68","hashOfConfig":"57"},{"size":847,"mtime":1608182953931,"results":"69","hashOfConfig":"57"},{"size":610,"mtime":1608671575549,"results":"70","hashOfConfig":"57"},{"size":1093,"mtime":1608462240904,"results":"71","hashOfConfig":"57"},{"size":4440,"mtime":1608872995807,"results":"72","hashOfConfig":"57"},{"size":4723,"mtime":1608493790065,"results":"73","hashOfConfig":"57"},{"size":5739,"mtime":1609843005053,"results":"74","hashOfConfig":"57"},{"size":2253,"mtime":1609570159126,"results":"75","hashOfConfig":"57"},{"size":4518,"mtime":1609834873466,"results":"76","hashOfConfig":"57"},{"size":5623,"mtime":1609581986623,"results":"77","hashOfConfig":"57"},{"size":1095,"mtime":1609834456801,"results":"78","hashOfConfig":"57"},{"size":244,"mtime":1608497603358,"results":"79","hashOfConfig":"57"},{"size":1026,"mtime":1608497565487,"results":"80","hashOfConfig":"57"},{"size":347,"mtime":1608360899574,"results":"81","hashOfConfig":"57"},{"size":15793,"mtime":1609843024556,"results":"82","hashOfConfig":"57"},{"size":2644,"mtime":1609615436107,"results":"83","hashOfConfig":"57"},{"size":1281,"mtime":1609615283649,"results":"84","hashOfConfig":"57"},{"size":3763,"mtime":1609840437479,"results":"85","hashOfConfig":"57"},{"size":5743,"mtime":1608882275391,"results":"86","hashOfConfig":"57"},{"size":4255,"mtime":1608873686417,"results":"87","hashOfConfig":"57"},{"size":4300,"mtime":1608873047944,"results":"88","hashOfConfig":"57"},{"size":3809,"mtime":1608747876253,"results":"89","hashOfConfig":"57"},{"size":1278,"mtime":1609615381707,"results":"90","hashOfConfig":"57"},{"size":2549,"mtime":1609615348474,"results":"91","hashOfConfig":"57"},{"size":468,"mtime":1608698468654,"results":"92","hashOfConfig":"57"},{"size":5556,"mtime":1609815773061,"results":"93","hashOfConfig":"57"},{"size":6545,"mtime":1609816525620,"results":"94","hashOfConfig":"57"},{"size":736,"mtime":1608751069791,"results":"95","hashOfConfig":"57"},{"size":1831,"mtime":1608881525656,"results":"96","hashOfConfig":"57"},{"size":1161,"mtime":1609620966845,"results":"97","hashOfConfig":"57"},{"size":3811,"mtime":1609797338744,"results":"98","hashOfConfig":"57"},{"size":4843,"mtime":1609795198004,"results":"99","hashOfConfig":"57"},{"size":12586,"mtime":1609822884439,"results":"100","hashOfConfig":"57"},{"size":999,"mtime":1609320293547,"results":"101","hashOfConfig":"57"},{"size":544,"mtime":1609235789660,"results":"102","hashOfConfig":"57"},{"size":1461,"mtime":1609488123877,"results":"103","hashOfConfig":"57"},{"size":1889,"mtime":1608698948699,"results":"104","hashOfConfig":"57"},{"size":5617,"mtime":1609659982394,"results":"105","hashOfConfig":"57"},{"size":528,"mtime":1609578165742,"results":"106","hashOfConfig":"57"},{"size":1628,"mtime":1609660023764,"results":"107","hashOfConfig":"57"},{"size":2276,"mtime":1609578530422,"results":"108","hashOfConfig":"57"},{"size":263,"mtime":1609614820834,"results":"109","hashOfConfig":"57"},{"size":794,"mtime":1609842981578,"results":"110","hashOfConfig":"57"},{"size":361,"mtime":1609839944821,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"r4yoid",{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"114"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"120"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"120"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"120"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"120"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"165"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"120"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"120"},"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\App.tsx",[],["241","242"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\RegisterScreen.tsx",[],["243","244"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\index.tsx",[],["245","246"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\config\\index.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\constants\\userConstants.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\reducers\\userReducer.ts",[],["247","248"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\actions\\userActions.ts",["249"],"import { USER_REGISTER_REQUEST, USER_REGISTER_FAIL, USER_REGISTER_SUCCESS, USER_SINGIN_REQUEST, USER_SINGIN_FAIL, USER_SINGIN_SUCCESS, USER_SIGNOUT, USER_DETAIL_REQUEST, USER_DETAIL_SUCCESS, USER_DETAIL_FAIL, USER_INFO_REQUEST, USER_INFO_SUCCESS, USER_INFO_FAIL, USER_INFO_RESET } from './../constants/userConstants';\r\nimport Axios from 'axios';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { API_BASE } from '../config/index';\r\n\r\nexport const register = (firstName: string, lastName: string, userName: string, email: string, password: string) => async (dispatch: ThunkDispatch<any, any, any>) => {\r\n    dispatch({ type: USER_REGISTER_REQUEST });\r\n    try {\r\n        const { data } = await Axios.post(`${API_BASE}/users/register`, { firstName, lastName, userName, email, password }, { withCredentials: true });\r\n        dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n        // dispatch signin success \r\n        localStorage.setItem('userInfo', JSON.stringify(data));\r\n        // dispatch({ type: USER_REGISTER_RESET });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload: error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const signin = (userName: string, password: string) => async (dispatch: ThunkDispatch<any, any, any>) => {\r\n\r\n    dispatch({ type: USER_SINGIN_REQUEST });\r\n    try {\r\n        const { data } = await Axios.post(`${API_BASE}/users/signin`, { userName, password }, { withCredentials: true });\r\n        dispatch({ type: USER_SINGIN_SUCCESS, payload: data });\r\n        dispatch({ type: USER_DETAIL_SUCCESS, payload: data });\r\n        localStorage.setItem('userInfo', JSON.stringify(data));\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_SINGIN_FAIL,\r\n            payload: error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        })\r\n    }\r\n};\r\n\r\nexport const signout = () => (dispatch: ThunkDispatch<any, any, any>) => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    dispatch({ type: USER_SIGNOUT });\r\n}\r\n\r\nexport const userDetail = () => async (dispatch: ThunkDispatch<any, any, any>, getState: () => any) => {\r\n    dispatch({ type: USER_DETAIL_REQUEST })\r\n    const { signinStore: { signinInfo } } = getState();\r\n    // console.log('signinInfo', signinInfo)\r\n    try {\r\n        const { data } = await Axios.get(`${API_BASE}/users/detail/${signinInfo._id}`, {\r\n            // headers: { Authorization: `Hong ${signinInfo.token}` },\r\n            withCredentials: true\r\n        });\r\n\r\n        // console.log(\"유저 디테일 뽑음\", data)\r\n        dispatch({ type: USER_DETAIL_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_DETAIL_FAIL,\r\n            payload: error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const userInfo = (userId: string) => async (dispatch: ThunkDispatch<any, any, any>, getState: () => any) => {\r\n    dispatch({ type: USER_INFO_REQUEST })\r\n    const { signinStore: { signinInfo } } = getState();\r\n    // console.log('signinInfo', signinInfo)\r\n    try {\r\n        const { data } = await Axios.get(`${API_BASE}/users/info/${userId}`, {\r\n            headers: { Authorization: `Hong ${signinInfo.token}` },\r\n            withCredentials: true\r\n        });\r\n\r\n        dispatch({ type: USER_INFO_SUCCESS, payload: data });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_INFO_FAIL,\r\n            payload: error.response && error.response.data.message\r\n                ? error.response.data.message\r\n                : error.message\r\n        })\r\n    }\r\n}","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\index.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\store.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\routes\\router.tsx",["250","251","252"],"import React, { useEffect } from 'react';\r\nimport { Route, BrowserRouter } from 'react-router-dom';\r\nimport { SigninScreen, HomeScreen, RegisterScreen, ProfileScreen, MessageScreen, NewMessageScreen } from '../screens/index';\r\nimport { PrivateRoute } from '../components/PrivateRoute';\r\nimport { CheckValidChatRoute } from '../components/CheckValidChatRoute';\r\nimport { InvalidPage } from '../components/InvalidPage';\r\nimport { Navbar } from '../components/Navbar';\r\nimport { Row } from 'react-bootstrap';\r\nimport { ThirdColumn } from '../components/ThirdColumn';\r\nimport { SearchScreen } from '../screens/SearchScreen';\r\nimport { ChatScreen } from '../screens/ChatScreen';\r\nimport { NotificationScreen } from '../screens/NotificationScreen';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { initialAppStateType } from '../store';\r\nimport { getUnReadNotification } from '../actions/notificationAction';\r\nimport { newNotificationUsingSocket } from '../components/socketio';\r\nimport { useSocket } from '../hooks';\r\n\r\n\r\n// let socket: Socket = io(\"http://localhost:9003\");\r\n\r\nexport const Router = () => {\r\n\r\n    const signinInfoStore = useSelector((state: initialAppStateType) => state.signinStore);\r\n    const { signinInfo } = signinInfoStore;\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const { socket } = useSocket();\r\n    console.log(\"라우터 tsx\")\r\n    useEffect(() => {\r\n        if (signinInfo) {\r\n            console.log(\"소켓 newFollow reveive하러 옴 로그인유저: \", signinInfo._id)\r\n            // newNotificationUsingSocket(signinInfo._id, socket)\r\n            socket.emit(\"join\", signinInfo._id, (error: Error) => {\r\n                if (error) {\r\n                    alert(error);\r\n                }\r\n            })\r\n        }\r\n    }, [signinInfo, signinInfo._id, socket]);\r\n\r\n    socket.on(\"receive notification\", () => {\r\n        console.log(\"노티 받았다.\")\r\n        dispatch(getUnReadNotification());\r\n    })\r\n\r\n\r\n    return (\r\n        <BrowserRouter >\r\n            <div className=\"mainScreen\">\r\n                <Row className=\"row\">\r\n                    <PrivateRoute component={Navbar} />\r\n                    <PrivateRoute path=\"/\" component={HomeScreen} exact />\r\n                    <PrivateRoute path=\"/profile/:userId\" component={ProfileScreen} />\r\n                    <PrivateRoute path=\"/search/posts\" component={SearchScreen} />\r\n                    <CheckValidChatRoute path=\"/message/chatRoom/:roomNum\" component={ChatScreen} />\r\n                    <PrivateRoute path=\"/message\" component={MessageScreen} exact />\r\n                    <PrivateRoute path=\"/message/new\" component={NewMessageScreen} />\r\n                    <PrivateRoute path=\"/notification\" component={NotificationScreen} />\r\n                    <Route path=\"/invalidPage\" component={InvalidPage} />\r\n                    <PrivateRoute component={ThirdColumn} exact />\r\n                    <Route path=\"/signin\" component={SigninScreen} />\r\n                    <Route path=\"/register\" component={RegisterScreen} />\r\n                </Row>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\Navbar.tsx",["253","254"],"import { Badge } from '@material-ui/core'\r\nimport Axios from 'axios'\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { getUnreadMessages } from '../actions/chatAction'\r\nimport { getUnReadNotification } from '../actions/notificationAction'\r\nimport { signout } from '../actions/userActions'\r\nimport { API_BASE } from '../config'\r\nimport { initialAppStateType } from '../store';\r\nimport { io, Socket } from 'socket.io-client';\r\n\r\n\r\nexport const Navbar = () => {\r\n\r\n    const signinInfoStore = useSelector((state: initialAppStateType) => state.signinStore);\r\n    const { signinInfo } = signinInfoStore;\r\n\r\n    const unReadNotificationsStore = useSelector((state: initialAppStateType) => state.unReadNotificationStore);\r\n    const { notifications: unReadNotifications } = unReadNotificationsStore;\r\n\r\n    const unReadMessagesStore = useSelector((state: initialAppStateType) => state.unReadMessagesStore);\r\n    const { messages: unReadMessages } = unReadMessagesStore;\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    const handleSignout = async () => {\r\n        const { data } = await Axios.get(`${API_BASE}/users/signout`);\r\n        console.log('data signout:  ', data);\r\n        dispatch(signout());\r\n        history.push('/signin');\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getUnReadNotification());\r\n        dispatch(getUnreadMessages());\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <div className=\"nav col-2\"> {/* 이 태그의 크기를 항상 10중에 2로 해준다. */}\r\n            <Link to=\"/\" className=\"redColor\"><i className=\"fas fa-cat\"></i></Link>\r\n            <Link to=\"/\"><i className=\"fas fa-home\"></i></Link>\r\n            <Link to=\"/search/posts\"><i className=\"fas fa-search\"></i></Link>\r\n\r\n            <Link to=\"/notification\">\r\n                <Badge badgeContent={unReadNotifications && unReadNotifications.length} color=\"secondary\">\r\n                    <i className=\"fas fa-bell\"></i>\r\n                </Badge>\r\n            </Link>\r\n            <Link to=\"/message\">\r\n                <Badge badgeContent={unReadMessages && unReadMessages.length} color=\"secondary\">\r\n                    <i className=\"fas fa-comment\"></i>\r\n                </Badge>\r\n            </Link>\r\n            <Link to={{\r\n                pathname: `/profile/${signinInfo.userName}`,\r\n                state: signinInfo,\r\n\r\n            }}><i className=\"fas fa-user\"></i></Link>\r\n            <Link to=\"/\" onClick={handleSignout}><i className=\"fas fa-sign-out-alt\"></i></Link>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\SigninScreen.tsx",[],["255","256"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\PrivateRoute.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\UserImage.tsx",["257"],"import React, { useEffect } from 'react'\r\nimport { API_BASE } from '../config';\r\nimport { SigninType } from '../reducers/userReducer';\r\n\r\ninterface UserImageProps {\r\n    userInfo: SigninType;\r\n    userDetailInfo: SigninType | undefined;\r\n}\r\n\r\nexport const UserImage: React.FC<UserImageProps> = ({ userInfo, userDetailInfo }) => {\r\n    return (\r\n        <div className=\"userImageContainer\">\r\n            <img\r\n                src={`${API_BASE}/uploads/images/${userDetailInfo === undefined ? userInfo.profilePic : userDetailInfo.profilePic}`}\r\n                alt=\"User's profile\" />\r\n        </div>\r\n    )\r\n}\r\n",["258","259"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\constants\\postConstants.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\actions\\postActions.ts",["260","261"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\reducers\\postReducer.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\Posts.tsx",["262","263"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\utils\\utils.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\SinglePost.tsx",["264","265","266","267"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\Reply.tsx",["268","269"],"import React, { Dispatch, SetStateAction, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { API_BASE } from '../config';\r\nimport { postDataType, replyType } from '../reducers/postReducer';\r\nimport { timeDifference, useStyles } from '../utils/utils';\r\nimport { deleteReply } from '../actions/replyActions';\r\nimport { SigninType } from '../reducers/userReducer';\r\nimport { REPLY_DELETE_RESET } from '../constants/replyConstants';\r\nimport { ToggleAlert } from './ToggleAlert';\r\n\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\r\nimport Pagination, { UsePaginationProps } from '@material-ui/lab/Pagination';\r\nimport { initialAppStateType } from '../store';\r\n\r\n\r\nexport interface ReplyPropsType {\r\n    post: postDataType;\r\n    signinInfo: SigninType;\r\n    updatedPostData: postDataType;\r\n    setUpdatedPostData?: Dispatch<SetStateAction<postDataType>>;\r\n}\r\n\r\nexport const Reply: React.FC<ReplyPropsType> = ({ post, signinInfo, updatedPostData, setUpdatedPostData }) => {\r\n\r\n    const [open, setOpen] = useState<boolean>(false);\r\n    const [alertMsg, setAlertMsg] = useState<string>(\"\");\r\n\r\n    const getRepliedTime = (reply: replyType) => {\r\n        const repliedTime = timeDifference(new Date().valueOf(), new Date(reply.createdAt).valueOf());\r\n        return repliedTime;\r\n    }\r\n\r\n    const replyDeleteStore = useSelector((state: initialAppStateType) => state.replyDeleteStore);\r\n    const { error: errorDelete, loading: loadingDelete, result: resultDelete } = replyDeleteStore;\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const handleDelete = (replyId: string, postId: string) => {\r\n        dispatch(deleteReply(replyId, postId));\r\n        setAlertMsg(\"Deleted\")\r\n        setOpen(true);\r\n    }\r\n\r\n\r\n    if (resultDelete && setUpdatedPostData !== undefined) {\r\n        setUpdatedPostData(resultDelete); // delete 하고 난 후에 해당 post데이터를 setUpdatePostData 로 state에 넣어준다. \r\n        dispatch({ type: REPLY_DELETE_RESET }) // 여기 리셋을 시켜줘야 버그(reply 를 delete 하고난 후에 heart 클릭하면 작동안함) 해결됬음\r\n    }\r\n\r\n    const sortedReplies = updatedPostData.replies && updatedPostData.replies.sort((reply_A, reply_B) => {\r\n        const A_time = new Date(reply_A.createdAt).valueOf();\r\n        const B_time = new Date(reply_B.createdAt).valueOf();\r\n        return B_time - A_time;\r\n    });\r\n\r\n\r\n    // pagination\r\n    const classes = useStyles();\r\n    const [page, setPage] = useState<number>(1);\r\n    const [pageData, setPageData] = useState<replyType[]>([]);\r\n    const dataLimit = 5;\r\n    const indexOfLast = page * dataLimit;\r\n    const indexOfFirst = indexOfLast - dataLimit;\r\n    const handlePageChange: UsePaginationProps[\"onChange\"] = (event: React.ChangeEvent<unknown>, value: number) => {\r\n        setPage(value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (sortedReplies) {\r\n            setPageData(sortedReplies.slice(indexOfFirst, indexOfLast));\r\n        }\r\n    }, [indexOfFirst, indexOfLast, sortedReplies])\r\n\r\n    // ****************************\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            { sortedReplies && sortedReplies.length !== 0 &&\r\n                <div >\r\n                    {\r\n                        pageData &&\r\n                        pageData.map((reply) => {\r\n                            return (\r\n                                <div className=\"each__reply\" key={reply._id}>\r\n                                    <div className=\"top__reply\">\r\n                                        <div className=\"userImageContainer__reply\">\r\n                                            <img src={`${API_BASE}/uploads/images/${reply.repliedBy.profilePic}`} alt=\"profile\" />\r\n                                        </div>\r\n                                        <div className=\"comment__reply\">\r\n                                            <span>{reply.repliedBy.firstName + \" \" + reply.repliedBy.lastName}</span>\r\n                                            <span> {reply.comment}</span>\r\n                                        </div>\r\n                                        {\r\n                                            (reply.repliedBy._id === signinInfo._id || signinInfo._id === post.postedBy._id) &&\r\n                                            <span className=\"deleteReplyBtn\">\r\n                                                <button className=\"deleteReplyIcon\" onClick={() => handleDelete(reply._id, post._id)}>\r\n                                                    <DeleteOutlinedIcon />\r\n                                                </button>\r\n                                            </span>\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"time__reply\">\r\n                                        {getRepliedTime(reply)}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                    {\r\n                        (sortedReplies.length / dataLimit) >= 1 &&\r\n                        <div className={`${classes.root} pagination__reply`}>\r\n                            <Pagination count={Math.ceil(sortedReplies.length / dataLimit)} color=\"primary\" size=\"small\" page={page} onChange={handlePageChange} />\r\n                        </div>\r\n                    }\r\n                    <ToggleAlert open={open} handleAlertClose={() => setOpen(false)} alertMsg={alertMsg} />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n",["270","271"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\actions\\replyActions.ts",["272"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\constants\\replyConstants.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\reducers\\replyReducer.ts",[],["273","274"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\ThirdColumn.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\ProfileScreen.tsx",["275","276","277","278","279","280","281"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\ProfileReplies.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\ProfilePosts.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\HomeScreen.tsx",["282","283"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\FollowModal.tsx",["284","285","286","287","288"],"import Axios from 'axios';\r\nimport React, { Dispatch, SetStateAction, useEffect, useState } from 'react';\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport { API_BASE } from '../config';\r\nimport { SigninType } from '../reducers/userReducer';\r\nimport { initialAppStateType } from '../store';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport interface populatedSigninType {\r\n    _id: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    userName: string;\r\n    email: string;\r\n    profilePic: string;\r\n    token: string;\r\n    likes: string[];\r\n    followers: SigninType[];\r\n    following: SigninType[];\r\n}\r\n\r\nexport interface ModalPropsType {\r\n    handleClose: () => void;\r\n    data: string;\r\n    chooseBtn: string;\r\n}\r\n\r\nexport const FollowModal: React.FC<ModalPropsType> = ({ handleClose, data, chooseBtn }) => {\r\n\r\n    const [populatedData, setPopulatedData] = useState<populatedSigninType>();\r\n    const [followers, setFollowers] = useState([]);\r\n    const [following, setFollowing] = useState([]);\r\n\r\n    const signinInfoStore = useSelector((state: initialAppStateType) => state.signinStore);\r\n    const { signinInfo } = signinInfoStore;\r\n\r\n    const selectedUserId = data;\r\n\r\n    useEffect(() => {\r\n\r\n        (\r\n            async () => {\r\n                const { data } = await Axios.get(`${API_BASE}/users/${selectedUserId}/${chooseBtn}`, {\r\n                    // headers: { Authorization: `Hong ${signinInfo.token}` },\r\n                    withCredentials: true\r\n                });\r\n                setPopulatedData(data);\r\n            }\r\n        )();\r\n    }, [chooseBtn, followers, following, selectedUserId, signinInfo.token])\r\n\r\n    console.log('populatedData', typeof populatedData?.followers[0] === \"object\");\r\n\r\n    return (\r\n        <div>{\r\n\r\n            typeof populatedData?.followers[0] === \"object\" ? (\r\n                <div>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Follower</Modal.Title>\r\n                    </Modal.Header>\r\n                    {\r\n                        populatedData.followers.map((follower) => {\r\n                            return (\r\n\r\n                                <Modal.Body>\r\n                                    <div className=\"user\" key={follower._id}>\r\n                                        <div className=\"userImageContainer\">\r\n                                            <img src={`${API_BASE}/uploads/images/${follower.profilePic}`} alt=\"profile\" />\r\n                                        </div>\r\n                                        <div className=\"userDetailsContainer\">\r\n                                            <div className=\"header\">\r\n                                                <Link to={\r\n                                                    {\r\n                                                        pathname: `/profile/${follower?.userName}`,\r\n                                                        state: follower,\r\n                                                    }\r\n                                                }\r\n                                                    onClick={handleClose}\r\n                                                    className=\"displayName\">{follower?.firstName + \" \" + follower?.lastName}</Link>\r\n                                                <span className=\"username\">@{follower?.userName}</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </Modal.Body>\r\n                            )\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n            ) : (\r\n                    <div>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Following</Modal.Title>\r\n                        </Modal.Header>\r\n                        {\r\n\r\n                            populatedData?.following.map((following) => {\r\n                                return (\r\n\r\n                                    <Modal.Body>\r\n                                        <div className=\"user\">\r\n                                            <div className=\"userImageContainer\">\r\n                                                <img src={`${API_BASE}/uploads/images/${following.profilePic}`} alt=\"profile\" />\r\n                                            </div>\r\n                                            <div className=\"userDetailsContainer\">\r\n                                                <div className=\"header\">\r\n                                                    <Link to={\r\n                                                        {\r\n                                                            pathname: `/profile/${following?.userName}`,\r\n                                                            state: following,\r\n                                                        }\r\n                                                    }\r\n                                                        onClick={handleClose}\r\n                                                        className=\"displayName\">{following?.firstName + \" \" + following?.lastName}</Link>\r\n                                                    <span className=\"username\">@{following?.userName}</span>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Modal.Body>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\ImgUploadModal.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\CoverImgUploadModal.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\SearchScreen.tsx",["289","290"],"import React, { ChangeEvent, FormEvent, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, Route, useHistory, useLocation } from 'react-router-dom';\r\nimport { initialAppStateType } from '../store';\r\nimport { SearchPosts } from '../components/SearchPosts';\r\nimport { SearchUsers } from '../components/SearchUsers';\r\nimport { searchPosts, searchUsers } from '../actions/searchAction';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\n\r\nexport const SearchScreen = () => {\r\n\r\n    const [search, setSearch] = useState<string>(\"\");\r\n    // const [searchedPosts, setSearchedPosts] = useState<postDataType[]>([]);\r\n    // const [searchedUsers, setSearchedUsers] = useState<SigninType[]>([]);\r\n\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const slicedUrl = location.pathname.slice(14);\r\n\r\n\r\n    const searchPostsStore = useSelector((state: initialAppStateType) => state.searchPostsStore);\r\n    const { error: errorPosts, loading: loadingPosts, posts } = searchPostsStore;\r\n\r\n    const searchUsersStore = useSelector((state: initialAppStateType) => state.searchUsersStore);\r\n    const { error: errorUsers, loading: loadingUsers, users } = searchUsersStore;\r\n\r\n\r\n    // Post 랑 Replies 버튼 클릭시 bottom border색 주기 위함\r\n    const [activePost, setActivePost] = useState<boolean>(true);\r\n    const [activeReplies, setActiveReplies] = useState<boolean>(false);\r\n    const handleActivePost = () => {\r\n        setActivePost(true);\r\n        setActiveReplies(false);\r\n    }\r\n    const handleActiveReplies = () => {\r\n        setActiveReplies(true);\r\n        setActivePost(false);\r\n    }\r\n    // *************************************************************\r\n\r\n\r\n\r\n    const handleSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearch(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        if (slicedUrl === \"\") {\r\n            dispatch(searchPosts(search))\r\n        } else {\r\n            dispatch(searchUsers(search))\r\n        }\r\n        setSearch(\"\");\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mainSectionContainer col-10 col-md-8\">\r\n                <div className=\"SearchHeaderContainer\">\r\n                    <div className=\"titleContainer\">\r\n                        <h1>Search</h1>\r\n                    </div>\r\n                    <form className=\"search__form\" noValidate autoComplete=\"off\" onSubmit={handleSubmit} >\r\n                        <TextField id=\"standard-basic\" label=\"Search for users or posts\" autoFocus={true} onChange={handleSearch} value={search} />\r\n                        <SearchIcon />\r\n                    </form>\r\n                </div>\r\n\r\n                <div className=\"tabsContainer\">\r\n                    <Link to={`/search/posts`}\r\n                        className={`tab ${activePost ? \"active\" : \"\"}`}\r\n                        onClick={handleActivePost}\r\n                    >Posts</Link>\r\n                    <Link to={`/search/posts/users`}\r\n                        className={`tab ${activeReplies ? \"active\" : \"\"}`}\r\n                        onClick={handleActiveReplies}\r\n                    >Users</Link>\r\n                </div>\r\n\r\n                <div className=\"postsContainer\">\r\n                    <Route path={`/search/posts`} render={() => <SearchPosts posts={posts} loadingPosts={loadingPosts} errorPosts={errorPosts} />} exact />\r\n                    <Route path={`/search/posts/users`} render={() => <SearchUsers users={users} loadingUsers={loadingUsers} errorUsers={errorUsers} />} />\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\SearchPosts.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\SearchUsers.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\constants\\searchConstants.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\MessageScreen.tsx",["291","292","293"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\NewMessageScreen.tsx",["294","295","296"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\ToggleAlert.tsx",["297"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\actions\\searchAction.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\constants\\chatConstants.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\actions\\chatAction.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\reducers\\chatReducer.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\ChatScreen.tsx",["298","299","300","301"],"import Axios from \"axios\";\r\nimport React, { ChangeEvent, KeyboardEvent, useEffect, useRef, useState } from \"react\";\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { getChatMessages, getUnreadMessages, selectedChat, sendChatMessage } from '../actions/chatAction';\r\nimport { API_BASE } from \"../config\";\r\nimport { ChatMessageType, ChatType } from \"../reducers/chatReducer\";\r\nimport { SigninType } from \"../reducers/userReducer\";\r\nimport { initialAppStateType } from '../store';\r\nimport { getChatImage } from \"./MessageScreen\";\r\nimport { MessageContents } from '../components/MessageContents';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { LoadingSpinner } from '../components/LoadingSpinner';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nlet socket: Socket;\r\n\r\ninterface locationType extends Location {\r\n    state: {\r\n        chat?: ChatType;\r\n        chatListInfo?: ChatType[];\r\n        userInfoData?: SigninType;\r\n        userInfoDataFromNewMessageComponent?: string;\r\n    };\r\n}\r\n\r\nexport const ChatScreen = () => {\r\n    const location = useLocation();\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const focusRef = useRef<HTMLInputElement & HTMLTextAreaElement>(null);\r\n\r\n    const [chatName, setChatName] = useState<string>(\"\");\r\n    const [msgcontents, setMsgContents] = useState<string>(\"\");\r\n    const chatRoomId = location.pathname.split(\"/\")[3];\r\n    const typedLocation = location as locationType;\r\n\r\n    // 내가 로그인한 정보\r\n    const signinInfoStore = useSelector((state: initialAppStateType) => state.signinStore);\r\n    const { signinInfo, error: errorSignin, loading: loadingSignin } = signinInfoStore;\r\n\r\n    const selectedChatStore = useSelector((state: initialAppStateType) => state.selectedChatStore);\r\n    const { chatData, error, loading } = selectedChatStore;\r\n\r\n    const sendChatMessageStore = useSelector((state: initialAppStateType) => state.sendChatMessageStore);\r\n    const { message } = sendChatMessageStore;\r\n\r\n    const getChatMessagesStore = useSelector((state: initialAppStateType) => state.getChatMessagesStore);\r\n    const { messages: getChatMessagesData } = getChatMessagesStore;\r\n\r\n    const [chatArr, setChatArr] = useState<ChatMessageType[]>([]);\r\n\r\n\r\n    // Bootstrap modal -------------------------------------------\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => {\r\n        setShow(true);\r\n        if (focusRef && focusRef.current) {\r\n            focusRef.current.focus();\r\n        }\r\n    }\r\n    const handleSaveClose = async () => {\r\n        setShow(false);\r\n        const { data } = await Axios.put(`${API_BASE}/chats/changeChatName/${chatRoomId}`, { chatName }, {\r\n            withCredentials: true,\r\n        });\r\n        // console.log('data: ', data)\r\n        setChatName(data.chatName);\r\n        dispatch(selectedChat(chatRoomId))\r\n    }\r\n\r\n    // -------------------------------------------------------------\r\n\r\n    const handleChatName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setChatName(e.target.value);\r\n    }\r\n\r\n    const handleSendMsg = () => {\r\n        console.log(\"submit\");\r\n        submitFunc();\r\n    }\r\n\r\n    const handleSendMsgPress = (event: KeyboardEvent) => {\r\n        event.preventDefault();\r\n        submitFunc();\r\n    }\r\n\r\n\r\n    const submitFunc = () => {\r\n        if (msgcontents.trim() === \"\") {\r\n            console.log(\"서밋안됨: \", msgcontents)\r\n            setMsgContents(\"\");\r\n            return;\r\n        }\r\n        // console.log(\"서밋: \", msgcontents)\r\n        dispatch(sendChatMessage(msgcontents, chatRoomId));\r\n        setMsgContents(\"\");\r\n    }\r\n\r\n\r\n\r\n    const handleTextAreaChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n\r\n        setMsgContents(e.target.value)\r\n    }\r\n\r\n\r\n    const typingDotsRef = useRef<HTMLDivElement>(null);\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (message) {\r\n            console.log('message 보내졋음: ', message)\r\n            socket.emit(\"sendMessage\", chatRoomId, message);\r\n\r\n            if (chatMessagesRef && chatMessagesRef.current) {\r\n                const pick = chatMessagesRef.current;\r\n                console.log('pick', pick);\r\n                chatMessagesRef.current!.scrollTop = chatMessagesRef.current!.scrollHeight;\r\n            }\r\n\r\n        }\r\n\r\n    }, [chatRoomId, message])\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (focusRef && focusRef.current) {\r\n            console.log(\"포커싱바로됨\")\r\n            focusRef.current.focus();\r\n        }\r\n        (\r\n            async () => {\r\n                // const chat = typedLocation.state.chat;\r\n                if (typedLocation.state?.chat) {\r\n                    console.log(\"------------------처음원래 있는 채팅창---------------------\")\r\n                    dispatch(selectedChat(chatRoomId))\r\n                    dispatch(getChatMessages(chatRoomId))\r\n                } else if (typedLocation.state.userInfoDataFromNewMessageComponent) {\r\n                    console.log(\"---------------------메세지에서 새로운 매세지 버튼 누르고 들어오는---------------------\")\r\n                    console.log(\"1:1채팅 열기위해 들어옴\")\r\n                    dispatch(selectedChat(typedLocation.state.userInfoDataFromNewMessageComponent as string));\r\n                    dispatch(getChatMessages(chatRoomId))\r\n                } else {\r\n                    console.log(\"---------------------프로필에 메세지버튼 누르고 들어오는---------------------\")\r\n                    dispatch(selectedChat(chatRoomId))\r\n                    dispatch(getChatMessages(chatRoomId))\r\n                }\r\n            }\r\n        )();\r\n\r\n    }, [chatRoomId, dispatch, typedLocation.state?.chat, typedLocation.state.userInfoData?._id, typedLocation.state.userInfoDataFromNewMessageComponent]);\r\n\r\n\r\n    const chatMessagesRef = useRef<HTMLUListElement>(null);\r\n\r\n    useEffect(() => {\r\n        console.log(\"한번실행됨: \", chatMessagesRef)\r\n        // 해당 채팅룸 들어오면 바로 읽음으로 표시되어 읽지않은것을 다시 불러온다.\r\n        dispatch(getUnreadMessages());\r\n        if (getChatMessagesData) {\r\n            setChatArr(getChatMessagesData);\r\n        }\r\n\r\n    }, [dispatch, getChatMessagesData])\r\n\r\n    console.log('getChatMessagesData: ', getChatMessagesData)\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        // navbar에서 message 버튼 클릭하고 들어오면 소켓이 연결된다 이 socket을 chatScreen에서 import를 해서 사용한다.\r\n        socket = io(\"http://localhost:9003\");\r\n        socket.emit(\"join\", chatRoomId, (error: Error) => {\r\n            if (error) {\r\n                alert(error);\r\n            }\r\n        })\r\n\r\n        socket.on(\"typing\", () => typingDotsRef.current?.classList.add(\"show\"))\r\n\r\n        socket.on(\"noContents\", () => typingDotsRef.current?.classList.remove(\"show\"))\r\n\r\n        socket.on(\"receive message\", async (newMessage: ChatMessageType) => {\r\n            console.log('newMessage: ', newMessage);\r\n            // 채팅방에 있을때 받은 메세지를바로 읽음 으로 바꾸기 시도 (readBy에 로그인한 유저 아이디 추가)\r\n            await Axios.put(`${API_BASE}/chats/addUserInReadBy/${chatRoomId}`, {}, {\r\n                withCredentials: true,\r\n            })\r\n            typingDotsRef.current?.classList.remove(\"show\");\r\n            if (newMessage) {\r\n                setChatArr((chatArr) => [...chatArr, newMessage]);\r\n            }\r\n        })\r\n\r\n\r\n        return () => {\r\n            socket.emit('disconnected');\r\n            socket.off();\r\n        }\r\n    }, [chatRoomId])\r\n\r\n\r\n    // Typing Dots...\r\n    useEffect(() => {\r\n        if (msgcontents.length > 0) {\r\n            socket.emit(\"typing\", chatRoomId);\r\n        } else {\r\n            socket.emit(\"noContents\", chatRoomId);\r\n        }\r\n    }, [chatRoomId, msgcontents])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {\r\n                loading ? <LoadingSpinner /> :\r\n                    error ? <Alert severity=\"warning\">There is an error to load page..</Alert> :\r\n                        chatData && (\r\n                            <div className=\"mainSectionContainer col-10 col-md-8\">\r\n                                <div className=\"titleContainer\">\r\n                                    <h1>Chat</h1>\r\n                                </div>\r\n                                <div className=\"chatPageContainer\">\r\n                                    <div className=\"chatTitleBarContainer\">\r\n                                        {getChatImage(chatData)}\r\n                                        <span id=\"chatName\">{chatData.chatName ? chatData.chatName : \"This is chat room\"}</span>\r\n                                        <span className=\"editChatName\">\r\n                                            <button className=\"chatNameBtn\" onClick={handleShow}>\r\n                                                <i className=\"far fa-edit\"></i>\r\n                                            </button>\r\n                                        </span>\r\n                                    </div>\r\n\r\n                                    <Modal show={show} onHide={handleClose} centered>\r\n                                        <Modal.Header closeButton>\r\n                                            <Modal.Title>Change Chat name</Modal.Title>\r\n                                        </Modal.Header>\r\n                                        <Modal.Body>\r\n                                            <input id=\"chatNameTextbox\" type=\"text\" onChange={handleChatName} ref={focusRef} />\r\n                                        </Modal.Body>\r\n                                        <Modal.Footer>\r\n                                            <Button variant=\"secondary\" onClick={handleClose}>\r\n                                                Close\r\n                                </Button>\r\n                                            <Button variant=\"primary\" onClick={handleSaveClose}>\r\n                                                Save Changes\r\n                                </Button>\r\n                                        </Modal.Footer>\r\n                                    </Modal>\r\n\r\n\r\n\r\n\r\n                                    <div className=\"mainContentContainer\">\r\n                                        <div className=\"chatContainer\">\r\n                                            <ul className=\"chatMessages\" ref={chatMessagesRef}>\r\n                                                <MessageContents signinInfo={signinInfo} chatArr={chatArr} />\r\n                                            </ul>\r\n\r\n                                            <div className=\"typingDots\" ref={typingDotsRef} >\r\n                                                <img src=\"/images/dots.gif\" alt=\"typing dots\" />\r\n                                            </div>\r\n\r\n                                            <div className=\"footer\">\r\n                                                <textarea\r\n                                                    name=\"messageInput\"\r\n                                                    placeholder=\"Type a message...\"\r\n                                                    value={msgcontents}\r\n                                                    onChange={handleTextAreaChange}\r\n                                                    onKeyPress={(event) =>\r\n                                                        event.key === \"Enter\" && !event.shiftKey ? handleSendMsgPress(event) : null\r\n                                                    }\r\n                                                    ref={focusRef}\r\n                                                />\r\n                                                <button\r\n                                                    className={`sendMessageButton ${msgcontents === \"\" ? \"inActive\" : \"active\"}`}\r\n                                                    onClick={handleSendMsg}\r\n\r\n                                                >\r\n                                                    <i className=\"fas fa-paper-plane\"></i>\r\n                                                </button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n        </>\r\n    );\r\n};\r\n","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\CheckValidChatRoute.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\InvalidPage.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\MessageContents.tsx",["302","303","304","305","306","307"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getChatMessages } from '../actions/chatAction';\r\nimport { ChatMessageType } from '../reducers/chatReducer';\r\nimport { SigninType } from '../reducers/userReducer';\r\nimport { initialAppStateType } from '../store';\r\n\r\nexport interface MessagecontentsPropsType {\r\n    signinInfo: SigninType;\r\n    chatArr: ChatMessageType[];\r\n}\r\n\r\nexport const MessageContents: React.FC<MessagecontentsPropsType> = ({ signinInfo, chatArr }) => {\r\n\r\n\r\n    console.log('chatArr: =>>>>> ', chatArr)\r\n\r\n\r\n\r\n\r\n\r\n    const messageSender = (message: ChatMessageType) => {\r\n        const isMine = message.sender._id === signinInfo._id;\r\n        const liClassName = isMine ? \"mine\" : \"theirs\";\r\n        return liClassName;\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            {// <div>채팅</div>\r\n                chatArr &&\r\n                chatArr.map((message) => {\r\n\r\n\r\n                    return (\r\n                        <li className={`message ${messageSender(message)}`} key={message._id}>\r\n                            <div className=\"messageContainer\">\r\n                                <span className=\"messageBody\">\r\n                                    {message.content}\r\n                                </span>\r\n                            </div>\r\n                        </li>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\reducers\\searchReducer.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\screens\\NotificationScreen.tsx",["308","309"],"import React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { initialAppStateType } from '../store';\r\nimport { getNotification, getUnReadNotification } from '../actions/notificationAction';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { API_BASE } from '../config';\r\nimport { getNotificationTextFilter, getNotificationURL } from '../utils/utils';\r\nimport { notificationType } from '../reducers/notificationReducer';\r\nimport Axios from 'axios';\r\nimport { Tooltip } from '@material-ui/core';\r\n\r\nexport const NotificationScreen = () => {\r\n\r\n    const notificationStore = useSelector((state: initialAppStateType) => state.notificationStore);\r\n    const { error, loading, notifications } = notificationStore;\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n\r\n    // 각 알림을 클릭 햇을 경우 db에서 notification collection에 open 을 false 에서 true로 변경하기위함\r\n    const handleNotification = async (notification: notificationType) => {\r\n        // console.log('notification: ', notification);\r\n        await Axios.put(`${API_BASE}/notifications/markNotiOpened/${notification._id}`, {}, {\r\n            withCredentials: true,\r\n        });\r\n        // 알림을 읽으면 navbar에 표시된 읽지 않은 알림이 있는지 다시 받아서 숫자를 변경한다.\r\n        dispatch(getUnReadNotification());\r\n    }\r\n\r\n    const handleReadAll = async () => {\r\n        await Axios.put(`${API_BASE}/notifications/markAllNotiOpened/`, {}, {\r\n            withCredentials: true,\r\n        });\r\n        // 알림을 한번에 모두 확인(opened = true)로 바꾸는 걸 콜하고 바로 리랜더를 통해서 update된 notifications들을 불러오게 하기 위해서 사용했다.\r\n        dispatch(getNotification());\r\n    }\r\n\r\n    const markAllClassName = () => {\r\n        const numOfUnreadNoti = notifications.filter((noti) => noti.opened === false).length\r\n\r\n        if (numOfUnreadNoti > 0) {\r\n            return \"markAll__active\"\r\n        }\r\n        return \"markAll__inactive\"\r\n    }\r\n\r\n    const deleteAllClassName = () => {\r\n        const numOfNotification = notifications.length\r\n\r\n        if (numOfNotification > 0) {\r\n            return \"deleteAll__active\"\r\n        }\r\n        return \"deleteAll__inactive\"\r\n    }\r\n\r\n    const handleDelete = async () => {\r\n        await Axios.delete(`${API_BASE}/notifications/deleteAll/`, {\r\n            withCredentials: true,\r\n        });\r\n        // 알림을 모두 지우고 update된 notifications들을 불러오게 하기 위해서 사용했다.\r\n        dispatch(getNotification());\r\n        // 알림을 모두 지우면 navbar에 표시된 읽지 않은 알림이 있는지 다시 받아서 숫자를 변경한다.\r\n        dispatch(getUnReadNotification());\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getNotification())\r\n    }, [dispatch,])\r\n\r\n    return (\r\n        <div className=\"mainSectionContainer col-10 col-md-8\">\r\n            <div className=\"titleContainer\">\r\n                <h1>Notification</h1>\r\n                <Tooltip title=\"Read All\">\r\n                    <button className={`${notifications && markAllClassName()}`} id=\"markNotificationsAsRead\" onClick={handleReadAll}>\r\n                        <i className=\"fas fa-check-double\"></i>\r\n                    </button>\r\n                </Tooltip>\r\n                <Tooltip title=\"Delete All\" className={`${notifications && deleteAllClassName()}`}>\r\n                    <button id=\"markNotificationsAsRead\" onClick={handleDelete}>\r\n                        <i className=\"fas fa-trash-alt\"></i>\r\n                    </button>\r\n                </Tooltip>\r\n            </div>\r\n            {error && error}\r\n            {loading && loading}\r\n            {\r\n                notifications && notifications.length > 0 ?\r\n                    notifications.map((notification) => {\r\n                        const userFrom = notification.userFrom;\r\n                        const firstName = userFrom.firstName;\r\n                        const lastName = userFrom.lastName;\r\n                        const className = notification.opened ? \"notifyInActive\" : \"notifyActive\";\r\n\r\n                        return (\r\n                            <Link to={{\r\n                                pathname: `${getNotificationURL(notification)}`,\r\n                                state: notification.userFrom\r\n                            }} key={notification._id} className={`notification resultlistitem ${className}`}\r\n                                onClick={() => handleNotification(notification)}\r\n                            >\r\n\r\n                                <div className=\"userImageContainer\">\r\n                                    <img src={`${API_BASE}/uploads/images/${userFrom.profilePic}`} alt=\"user profile\" />\r\n                                </div>\r\n\r\n                                <div className=\"resultsDetailscontainer ellipsis\">\r\n                                    <span className=\"ellipsis\">{`${firstName} ${lastName}, ${getNotificationTextFilter(notification)}`}</span>\r\n                                    {/* <Alert className=\"ellipsis\" severity=\"info\">{`${firstName} ${lastName}, ${getNotificationTextFilter(notification)}`}</Alert> */}\r\n                                </div>\r\n                            </Link>\r\n                        )\r\n                    }) : (\r\n                        <Alert severity=\"warning\">You have no Notifications.</Alert>\r\n                    )\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\constants\\notificationConstants.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\actions\\notificationAction.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\reducers\\notificationReducer.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\LoadingSpinner.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\components\\socketio.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\CommunicatingApp-TypeScript\\client\\src\\hooks\\index.ts",["310"],"import { useEffect } from 'react';\r\nimport { io, Socket } from 'socket.io-client';\r\n\r\nexport const useSocket = (url?: string) => {\r\n    let socket: Socket = io(url || \"http://localhost:9003\");\r\n    useEffect(() => {\r\n        return () => {\r\n            socket.off();\r\n            socket.emit('disconnected');\r\n        }\r\n    }, []);\r\n    return { socket };\r\n}\r\n",{"ruleId":"311","replacedBy":"312"},{"ruleId":"313","replacedBy":"314"},{"ruleId":"311","replacedBy":"315"},{"ruleId":"313","replacedBy":"316"},{"ruleId":"311","replacedBy":"317"},{"ruleId":"313","replacedBy":"318"},{"ruleId":"311","replacedBy":"319"},{"ruleId":"313","replacedBy":"320"},{"ruleId":"321","severity":1,"message":"322","line":1,"column":264,"nodeType":"323","messageId":"324","endLine":1,"endColumn":279},{"ruleId":"321","severity":1,"message":"325","line":13,"column":10,"nodeType":"323","messageId":"324","endLine":13,"endColumn":12},{"ruleId":"321","severity":1,"message":"326","line":13,"column":14,"nodeType":"323","messageId":"324","endLine":13,"endColumn":20},{"ruleId":"321","severity":1,"message":"327","line":17,"column":10,"nodeType":"323","messageId":"324","endLine":17,"endColumn":36},{"ruleId":"321","severity":1,"message":"325","line":11,"column":10,"nodeType":"323","messageId":"324","endLine":11,"endColumn":12},{"ruleId":"321","severity":1,"message":"326","line":11,"column":14,"nodeType":"323","messageId":"324","endLine":11,"endColumn":20},{"ruleId":"311","replacedBy":"328"},{"ruleId":"313","replacedBy":"329"},{"ruleId":"321","severity":1,"message":"330","line":1,"column":17,"nodeType":"323","messageId":"324","endLine":1,"endColumn":26},{"ruleId":"311","replacedBy":"331"},{"ruleId":"313","replacedBy":"332"},{"ruleId":"321","severity":1,"message":"333","line":10,"column":17,"nodeType":"323","messageId":"324","endLine":10,"endColumn":21},{"ruleId":"321","severity":1,"message":"334","line":28,"column":28,"nodeType":"323","messageId":"324","endLine":28,"endColumn":38},{"ruleId":"321","severity":1,"message":"325","line":15,"column":10,"nodeType":"323","messageId":"324","endLine":15,"endColumn":12},{"ruleId":"321","severity":1,"message":"335","line":17,"column":10,"nodeType":"323","messageId":"324","endLine":17,"endColumn":19},{"ruleId":"321","severity":1,"message":"336","line":1,"column":43,"nodeType":"323","messageId":"324","endLine":1,"endColumn":51},{"ruleId":"321","severity":1,"message":"337","line":29,"column":11,"nodeType":"323","messageId":"324","endLine":29,"endColumn":18},{"ruleId":"321","severity":1,"message":"338","line":32,"column":13,"nodeType":"323","messageId":"324","endLine":32,"endColumn":16},{"ruleId":"321","severity":1,"message":"339","line":32,"column":48,"nodeType":"323","messageId":"324","endLine":32,"endColumn":57},{"ruleId":"321","severity":1,"message":"340","line":34,"column":20,"nodeType":"323","messageId":"324","endLine":34,"endColumn":31},{"ruleId":"321","severity":1,"message":"341","line":34,"column":42,"nodeType":"323","messageId":"324","endLine":34,"endColumn":55},{"ruleId":"311","replacedBy":"342"},{"ruleId":"313","replacedBy":"343"},{"ruleId":"321","severity":1,"message":"334","line":8,"column":28,"nodeType":"323","messageId":"324","endLine":8,"endColumn":38},{"ruleId":"311","replacedBy":"344"},{"ruleId":"313","replacedBy":"345"},{"ruleId":"321","severity":1,"message":"325","line":15,"column":10,"nodeType":"323","messageId":"324","endLine":15,"endColumn":12},{"ruleId":"321","severity":1,"message":"326","line":15,"column":14,"nodeType":"323","messageId":"324","endLine":15,"endColumn":20},{"ruleId":"321","severity":1,"message":"346","line":23,"column":10,"nodeType":"323","messageId":"324","endLine":23,"endColumn":31},{"ruleId":"321","severity":1,"message":"347","line":46,"column":32,"nodeType":"323","messageId":"324","endLine":46,"endColumn":43},{"ruleId":"321","severity":1,"message":"348","line":46,"column":54,"nodeType":"323","messageId":"324","endLine":46,"endColumn":67},{"ruleId":"321","severity":1,"message":"349","line":50,"column":50,"nodeType":"323","messageId":"324","endLine":50,"endColumn":67},{"ruleId":"350","severity":1,"message":"351","line":105,"column":8,"nodeType":"352","endLine":105,"endColumn":32,"suggestions":"353"},{"ruleId":"321","severity":1,"message":"354","line":23,"column":44,"nodeType":"323","messageId":"324","endLine":23,"endColumn":60},{"ruleId":"321","severity":1,"message":"355","line":23,"column":71,"nodeType":"323","messageId":"324","endLine":23,"endColumn":89},{"ruleId":"321","severity":1,"message":"356","line":2,"column":17,"nodeType":"323","messageId":"324","endLine":2,"endColumn":25},{"ruleId":"321","severity":1,"message":"357","line":2,"column":27,"nodeType":"323","messageId":"324","endLine":2,"endColumn":41},{"ruleId":"321","severity":1,"message":"358","line":3,"column":10,"nodeType":"323","messageId":"324","endLine":3,"endColumn":16},{"ruleId":"321","severity":1,"message":"359","line":32,"column":23,"nodeType":"323","messageId":"324","endLine":32,"endColumn":35},{"ruleId":"321","severity":1,"message":"360","line":33,"column":23,"nodeType":"323","messageId":"324","endLine":33,"endColumn":35},{"ruleId":"321","severity":1,"message":"330","line":1,"column":41,"nodeType":"323","messageId":"324","endLine":1,"endColumn":50},{"ruleId":"321","severity":1,"message":"337","line":21,"column":11,"nodeType":"323","messageId":"324","endLine":21,"endColumn":18},{"ruleId":"321","severity":1,"message":"361","line":7,"column":10,"nodeType":"323","messageId":"324","endLine":7,"endColumn":25},{"ruleId":"321","severity":1,"message":"325","line":11,"column":10,"nodeType":"323","messageId":"324","endLine":11,"endColumn":12},{"ruleId":"321","severity":1,"message":"326","line":11,"column":14,"nodeType":"323","messageId":"324","endLine":11,"endColumn":20},{"ruleId":"321","severity":1,"message":"362","line":19,"column":27,"nodeType":"323","messageId":"324","endLine":19,"endColumn":37},{"ruleId":"321","severity":1,"message":"363","line":19,"column":48,"nodeType":"323","messageId":"324","endLine":19,"endColumn":60},{"ruleId":"321","severity":1,"message":"364","line":52,"column":15,"nodeType":"323","messageId":"324","endLine":52,"endColumn":35},{"ruleId":"321","severity":1,"message":"336","line":1,"column":17,"nodeType":"323","messageId":"324","endLine":1,"endColumn":25},{"ruleId":"321","severity":1,"message":"365","line":4,"column":10,"nodeType":"323","messageId":"324","endLine":4,"endColumn":17},{"ruleId":"321","severity":1,"message":"337","line":31,"column":11,"nodeType":"323","messageId":"324","endLine":31,"endColumn":18},{"ruleId":"321","severity":1,"message":"347","line":41,"column":32,"nodeType":"323","messageId":"324","endLine":41,"endColumn":43},{"ruleId":"321","severity":1,"message":"348","line":41,"column":54,"nodeType":"323","messageId":"324","endLine":41,"endColumn":67},{"ruleId":"321","severity":1,"message":"330","line":1,"column":17,"nodeType":"323","messageId":"324","endLine":1,"endColumn":26},{"ruleId":"321","severity":1,"message":"336","line":1,"column":28,"nodeType":"323","messageId":"324","endLine":1,"endColumn":36},{"ruleId":"321","severity":1,"message":"366","line":2,"column":10,"nodeType":"323","messageId":"324","endLine":2,"endColumn":21},{"ruleId":"321","severity":1,"message":"367","line":2,"column":23,"nodeType":"323","messageId":"324","endLine":2,"endColumn":34},{"ruleId":"321","severity":1,"message":"368","line":3,"column":10,"nodeType":"323","messageId":"324","endLine":3,"endColumn":25},{"ruleId":"321","severity":1,"message":"369","line":6,"column":10,"nodeType":"323","messageId":"324","endLine":6,"endColumn":29},{"ruleId":"321","severity":1,"message":"370","line":1,"column":17,"nodeType":"323","messageId":"324","endLine":1,"endColumn":28},{"ruleId":"321","severity":1,"message":"337","line":18,"column":11,"nodeType":"323","messageId":"324","endLine":18,"endColumn":18},{"ruleId":"350","severity":1,"message":"351","line":11,"column":8,"nodeType":"352","endLine":11,"endColumn":10,"suggestions":"371"},"no-native-reassign",["372"],"no-negated-in-lhs",["373"],["372"],["373"],["372"],["373"],["372"],["373"],"@typescript-eslint/no-unused-vars","'USER_INFO_RESET' is defined but never used.","Identifier","unusedVar","'io' is defined but never used.","'Socket' is defined but never used.","'newNotificationUsingSocket' is defined but never used.",["372"],["373"],"'useEffect' is defined but never used.",["372"],["373"],"'data' is assigned a value but never used.","'signinInfo' is assigned a value but never used.","'useSocket' is defined but never used.","'useState' is defined but never used.","'history' is assigned a value but never used.","'_id' is assigned a value but never used.","'updatedAt' is assigned a value but never used.","'errorDelete' is assigned a value but never used.","'loadingDelete' is assigned a value but never used.",["372"],["373"],["372"],["373"],"'getUnReadNotification' is defined but never used.","'errorSignin' is assigned a value but never used.","'loadingSignin' is assigned a value but never used.","'loadingUserDetail' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.","ArrayExpression",["374"],"'errorPostContent' is assigned a value but never used.","'loadingPostContent' is assigned a value but never used.","'Dispatch' is defined but never used.","'SetStateAction' is defined but never used.","'Button' is defined but never used.","'setFollowers' is assigned a value but never used.","'setFollowing' is assigned a value but never used.","'ChatMessageType' is defined but never used.","'errorUsers' is assigned a value but never used.","'loadingUsers' is assigned a value but never used.","'selectedUserFullName' is assigned a value but never used.","'connect' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'getChatMessages' is defined but never used.","'initialAppStateType' is defined but never used.","'useCallback' is defined but never used.",["375"],"no-global-assign","no-unsafe-negation",{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},"Update the dependencies array to be: [numOfFollowers, socket, userId]",{"range":"380","text":"381"},"Update the dependencies array to be: [socket]",{"range":"382","text":"383"},[4748,4772],"[numOfFollowers, socket, userId]",[328,330],"[socket]"]